---
title: "Programmation fonctionnelle objet en R (S3)"
webr:
  packages: ["dplyr", "disaggR"]
  autoload: false
---

## Introduction : S3 et la Programmation Orientée Objet

Comme on l'a vu dans la page d'introduction, S3 est un système de programmation orientée objet dans R, adapté par rapport aux autres langages pour être soluble au paradigme prédominant dans R, à savoir la programmation fonctionnelle.

Dans R, le système de Programmation Orientée Objet S3 est structuré par :

* des **fonction génériques** qui sont simplement des noms de fonctions munis d'une description abstraite en langage naturel. Par exemple `summary()` est une fonction générique. Sa description abstraite est décrite par l'aide accessible via `?summary`. On y trouve *"`summary` is a generic function used to produce result summaries of the results of various model fitting functions. The function invokes particular methods which depend on the class of the first argument."*. À charge des différents concepteurs d'objets de lui donner un sens particulier conforme à cette description abstraite.
* des **classes d'objets** qui sont simplement des étiquettes portées par l'objet et montrées à la fonction générique. Par exemple, si `objet` est un objet de classe `twoStepsBenchmark` du package [disaggR](https://github.com/InseeFr/disaggR), il montrera une étiquette `"twoStepsBenchmark"` à la fonction `summary()`. Un objet `tibble` montrera une étiquette `"tbl_df"` à la fonction `summary()` (`"tbl_df"` est le vrai nom de la classe des tibbles).
* des **méthodes** qui écrivent explicitement le code utilisé pour une fonction dans le cas d'une classe d'objet (on peut dire qu'on *implémente* `summary()` quand on en écrit explicitement son code pour une classe précise). Par exemple `summary()` renverra vers `summary.twoStepsBenchmark()` pour un objet de classe `twoStepsBenchmark`, tandis qu'elle essayera en premier de renvoyer vers `summary.tbl_df()` pour un tibble.
* Un **héritage** entre classes d'objets qui dit simplement que si une méthode n'existe pas pour une fonction générique, alors on en cherche une autre, puis une autre, et ainsi de suite. Par exemple un tibble a en fait 3 étiquettes, `c("tbl_df", "tbl", "data.frame")`. On cherchera d'abord `truc.tbl_df`, puis `truc.tbl`, puis `truc.data.frame`. En ce qui concerne la fonction `summary()`, on cherche d'abord une fonction `summary.tbl_df()` (qui n'existe pas), puis une fonction `summary.tbl()` (qui n'existe pas non plus), et enfin une fonction `summary.data.frame()` (qui existe ! Bingo ! C'est la méthode utilisée.).

Usuellement, un système de Programmation Orientée Objet structure le code en faisant appel à des *instances d'objets* sur lesquelles on appelle des *méthodes*. Plus spécifiquement, on a :

* Une **instance d'objet**, par exemple *la* baguette magique que j'ai en main en écrivant ces lignes.
* Une **classe d'objet**, par exemple celle des *baguettes magiques*. Toutes les instances de baguettes magiques se comportent exactement de la même manière, mais peuvent avoir différents attibuts (longueur, bois utilisé...).
* Des **méthodes**, à savoir les choses que l'on peut faire avec une classe d'objets. Par exemple en ce qui concerne les baguettes magiques, considérons `jeter_boule_de_feu()`, et `faire_pleuvoir()`.
* Un **héritage**, à savoir que chaque classe a une classe parente dont elle étend les possibilités. Une baguette magique est un type particulier de bâton de bois. La classe des "baguettes magiques" hérite de l'ensemble des méthodes des "bâtons de bois". On peut toujours `taper_sur_un_ennemi()`, `faire_un_feu_de_camp()`, `casser_en_deux()` avec une baguette magique.

On remarque que S3 préserve un peu cette structuration générale, mais l'adapte. Les éléments de POO sont tordus pour correspondre au paradigme prédominant qui est le paradigme fonctionnel. Voici les changements notables :

* On centre sur **les fonctions plutôt que les classes d'objets**. Au lieu de s'attarder sur une classe puis de décrire les méthodes/fonctions que l'on peut appliquer dessus, dans S3 on fait *exactement l'inverse* ; on énonce un nom de fonction puis on écrit comment cette fonction s'applique sur différents objets. On a d'abord la fonction générique `faire_pleuvoir(objet)`. On l'implémente en `faire_pleuvoir.baguette_magique(objet)` qui est la méthode `faire_pleuvoir()` adaptée aux baguettes magiques. On peut ensuite implémenter également `faire_pleuvoir.robot_chanteur(objet)` si on veut prévoir une méthode `faire_pleuvoir()` adaptée aux robots chanteurs.
* Il n'y a **pas de notion d'instance d'objet**. La notion d'instance d'objet induit une notion d'unicité et d'état interne, comme on l'a vu au chapitre précédent. Si on copiait `compteur_1` dans `compteur_1bis`, c'était le même compteur. Il n'y a pas de système d'instance natif à S3 ; i on veut des *instances*, il faut les créer manu-militari de la même manière qu'on l'a déjà fait (c'est l'objet de l'exercice 2 de ce classeur).

## S3 en pratique

Pour voir les classes d'un objet, on utilise la fonction `class()`.

```{webr-r}
library(disaggR)
library(dplyr)
benchmark <- twoStepsBenchmark(turnover, construction)
class(benchmark) # On ignorera ici ce qui est écrit sous attr(,"package")
class(dplyr::starwars)
```

On remarque que :

* Un objet créé par `twoStepsBenchmark()` hérite de la classe `"twoStepsBenchmark"`.
* Un tibble herite de la classe `"tbl_df"`, puis `"tbl"`, puis `"data.frame"`.

Une classe S3 est une étiquette apposée sur des données dont le type peut être consulté à l'aide de `typeof()` :

```{webr-r}
library(disaggR)
library(dplyr)
benchmark <- twoStepsBenchmark(turnover, construction)
typeof(benchmark)
typeof(dplyr::starwars)
```

On vérifie ainsi qu'aussi bien la classe `twoStepsBenchmark` que celle des tibbles sont basées sur des données stockées sous forme de liste.

On peut vérifier si un objet *hérite* d'une classe avec la fonction `inherits()` :

```{webr-r}
library(disaggR)
library(dplyr)
benchmark <- twoStepsBenchmark(turnover, construction)
inherits(benchmark, "twoStepsBenchmark") # Vrai
inherits(benchmark, "data.frame") # Faux
inherits(dplyr::starwars, "twoStepsBenchmark") # Faux
inherits(dplyr::starwars, "tbl_df") # Vrai
inherits(dplyr::starwars, "tbl") # Vrai
inherits(dplyr::starwars, "data.frame") # Vrai
```

On identifie une fonction générique S3 par le fait que son corps se limite à un `UseMethod("nom_de_la_fonction")`.

```{webr-r}
summary
```

Dans l'exemple ci-dessus, on voit que la fonction summary n'est définie par rien d'autre que :

```{r}
#| eval: false
summary <- function(object, ...) UseMethod("summary")
```

C'est assez succinct ! Cela déclare summary comme une fonction générique, et dit d'aller chercher la bonne méthode selon la classe du premier argument (ici `object`).

Pour voir les méthodes proposées par une fonction générique, on utilise `methods()` :

```{webr-r}
methods(summary)
```

Il y a un paquet de méthodes implémentées pour `summary()` dites-donc ! Certaines méthodes ont une étoile derrière leur nom, certaines n'ont pas d'étoile. Pour consulter le code d'une méthode *sans* étoile, il suffit de taper son nom.

```{webr-r}
summary.data.frame
```

Ces méthodes correspondent à des fonctions *exportées* par les packages (ou par r-base). C'est-à-dire que leur concepteur a tenu à les rendre disponibles aux utilisateurs. Elles peuvent très bien être utilisées avec leur propre nom si on ne souhaite pas passer par la générique.

```{webr-r}
summary.data.frame(dplyr::starwars)
```

Les méthodes ans étoiles derrière leur nom correspondent à des méthodes non-exportées par un package, c'est-à-dire que l'auteur du package n'a pas jugé utile de les rendre directement accessibles à l'utilisateur et privilégie l'emploi de la générique.

```{webr-r}
library(disaggR)
benchmark <- twoStepsBenchmark(turnover, construction)
summary.twoStepsBenchmark(benchmark) # Renvoie une erreur car le nom summary.data.frame n'est pas exporté.
```

On peut quand même lire ces méthodes et savoir d'où elles viennent en utilisant `getAnywhere()`.

```{webr-r}
getAnywhere(summary.twoStepsBenchmark)
```

Ici, on lit que la méthode `summary.twoStepsBenchmark` existe de manière interne au package `disaggR` et que son code est :

```{r}
#| eval: false
summary.twoStepsBenchmark <- function (object, ...) {
  summary.praislm(prais(object), ...)
}
```

Autrement dit, elle renvoie encore à une autre méthode de `summary`.

::: callout-note

On peut accéder à *toutes* les fonctions d'un package, y compris les fonctions non-exportées, à l'aide des triples doubles-points (`:::`). Par exemple, on peut accéder à `summary.twoStepsBenchmark` en écrivant :

```{webr-r}
library(disaggR)
benchmark <- twoStepsBenchmark(turnover, construction)
disaggR:::summary.twoStepsBenchmark(benchmark)
```

Bien sûr, inutile de vous prévenir que ce n'est pas une bonne pratique dans du code de production. R est très permissif, mais c'est à l'utilisateur de se discipliner. Si l'auteur d'un package a choisi de ne pas dire à l'utilisateur "tu peux utiliser cette fonction directement", c'est à nos risques et périls si on le fait quand même !

:::

On peut également utiliser `methods()` pour chercher toutes les méthodes associées à une classe :

```{webr-r}
library(disaggR)
library(dplyr)
methods(class = "twoStepsBenchmark")
methods(class = "tbl_df")
methods(class = "tbl")
methods(class = "data.frame")
```

## Attributs

N'importe quel objet peut se voir affecter un nombre quelquonque d'autres objets nommés appelés *attributs*. Ceux-ci peuvent être accedés à l'aide de la fonction `attributes()` qui renvoie une liste nommée.

```{webr-r}
attributes(dplyr::starwars)
```

Le tibble `starwars` a trois attributs :

* `names` qui stocke les noms de colonne
* `row.names` qui stocke les noms de ligne, et qui correspond ici simplement à des numéros car un tibble n'a pas de noms de lignes (l'attribut `row.names` est hérité des objets `data.frame`)
* `class` qui contient les classes de `dplyr::starwars`.

On voit donc qu'un objet classé selon le système S3 n'est rien d'autre qu'un objet avec un attribut "class".

Les attributs peuvent être accedés et affectés de différentes manières.

```{webr-r}
objet <-
  structure(
    1L:10L,
    class = "mon_vecteur",
    mon_attribut = list("bonjour", "le", "monde")
  )
class(objet)
attr(objet, "class")
attr(objet, "mon_attribut")
attributes(objet)
```

Ci-dessus, avec la fonction `structure()`, on a créé en un coup l'objet avec ses deux attributs `class` et `mon_attribut`.

On aurait pu également les affecter un par un comme on le voit ci-dessous.

```{webr-r}
objet <- 1L:10L
attr(objet, "class") <- "mon_vecteur" # complètement équivalent à class(objet) <- "mon_vecteur"
attr(objet, "mon_attribut") <- list("bonjour", "le", "monde")
class(objet))
attr(objet, "class")
attr(objet, "mon_attribut")
attributes(objet)
```

## Ma première classe S3

Définir une fonction `vecteur_titre()` qui :

* Prend deux arguments, à savoir un vecteur `x` et un argument `titre` (qui est un `character` de taille 1).
* Retourne le vecteur x, à qui on a affecté la classe `vecteur_avec_titre` ainsi qu'un attribut `titre` égal à l'argument `titre`.

```{webr-r}
# Vous pouvez faire l'exercice ici.
```

::: {.callout-tip collapse="true"}

## Proposition de solution

```{r}
vecteur_titre <- function(x, titre) {
  structure(x,
            class = "vecteur_avec_titre",
            titre = titre)
}
```

:::

Essayer ce constructeur sur `vecteur_titre(1:10, "Les 10 premiers entiers")` dont les attributs retournés par `attributes` doivent logiquement correspondre à :

```{r}
#| echo: false
list(
  class = "vecteur_avec_titre",
  titre = "Les 10 premiers entiers"
)
```

```{webr-r}
# Vous pouvez faire l'exercice ici.
```

::: {.callout-tip collapse="true"}

## Proposition de solution

```{r}
vecteur_titre <- function(x, titre) {
  structure(x,
            class = "vecteur_avec_titre",
            titre = titre)
}
mon_vecteur <- vecteur_titre(1:10, "Les 10 premiers entiers")
attributes(mon_vecteur)
```

:::

Après avoir saisi `mon_vecteur <- vecteur_titre(1:10, "Les 10 premiers entiers")`... Si je tape `mon_vecteur` dans R (ou dans la console si je suis sous RStudio), c'est très moche ! Je lis en effet :

```{r}
#| echo: false
vecteur_titre(1:10, "Les 10 premiers entiers")
```

La fonction qui est utilisée pour afficher un objet S3 lors de la saisie de celui-ci est la fonction `print()`. Vérifier que `print()` correspond à une fonction générique et afficher les méthodes associées.

```{webr-r}
# Vous pouvez faire l'exercice ici.
```

::: {.callout-tip collapse="true"}

## Proposition de solution

Il suffit de taper :

```{r}
print
```

pour vérifier que la fonction print est bien générique (elle utilise `UseMethod("print")`).

On peut en afficher les méthodes en tapant :

```{r}
methods(print)
```

Et il y en a beaucoup ! C'est normal, tous les objets veulent définir une manière de s'afficher.

:::

Définir une fonction `print.vecteur_avec_titre` qui vaut :

```{r}
print.vecteur_avec_titre <- function(x, ...) { # Les paramètres doivent être compatibles avec ceux de la fonction générique, d'où les ...
  cat(attr(x, "titre"), ":\n") # \n correspond à un saut de ligne
  cat(as.vector(x))
  # cat est une fonction qui permet d'écrire dans la console
}
```

Puis taper `mon_vecteur` pour vérifier ce qu'il se passe.

```{webr-r}
# Vous pouvez faire l'exercice ici.
```

::: {.callout-tip collapse="true"}

## Proposition de solution

```{r}
print.vecteur_avec_titre <- function(x, ...) { # Les paramètres doivent être compatibles avec ceux de la fonction générique, d'où les ...
  cat(attr(x, "titre"), ":\n") # \n correspond à un saut de ligne
  cat(as.vector(x))
  # cat est une fonction qui permet d'écrire dans la console
}
mon_vecteur
```

On a *implémenté* la fonction générique `print() par une *méthode* adaptée à la *classe* `"vecteur_avec_titre"`. Dorénavant, l'affichage est plus propre.

:::

On a donc créé notre propre méthode S3 à une fonction générique pré-existante. On veut aller plus loin et créer notre propre fonction générique. On veut :

* une fonction générique `get_titre` qui n'ait que pour argument `x`.
* Elle doit avoir une méthode `get_titre.vecteur_avec_titre` qui retourne le titre.
* Elle doit avoir une méthode `get_titre.tbl_df` qui lance `stop("Un tibble n'a pas de titre !")`.

Tester ensuite cette fonction par `get_titre(mon_vecteur)` et `get_titre(dplyr::starwars)`.

```{webr-r}
# Vous pouvez faire l'exercice ici.
```

::: {.callout-tip collapse="true"}

## Proposition de solution

```{r}
#| error: true
get_titre <- function(x) UseMethod("get_titre")
get_titre.vecteur_avec_titre <- function(x) attr(x, "titre")
get_titre.tbl_df <- function(x) stop("Un tibble n'a pas de titre !")
get_titre(mon_vecteur)
get_titre(dplyr::starwars)
```

On a donc ici créé une fonction générique, et on l'a implémenté par deux méthodes. Une pour `vecteur_avec_titre`, et une autre plus succinte pour les tibble, qui dirige vers une erreur.

:::

## Exercices

### Exercice 1

Utiliser la fonction `attributes()` pour retourner les attributs d'un vecteur `c(arnaud=1, bonjour=2)`. Comment sont stockés les noms dans un vecteur nommé ?

```{webr-r}
# Vous pouvez faire l'exercice ici.
```

::: {.callout-tip collapse="true"}

## Proposition de solution

```{r}
attributes(c(arnaud=1, bonjour=2))
```

On voit qu'un vecteur nommé n'est rien de plus qu'un vecteur avec un attribut `names`.

:::

Soit la matrice définie par :

```{r}
#| eval: false
matrice <- matrix(1L:12L, nrow = 3L, ncol = 4L)
colnames(matrice) <- c("les", "noms", "de", "colonnes")
rownames(matrice) <- c("voilà", "des", "lignes")
```

Utiliser la fonction `typeof()` pour voir le type des données d'une matrice. Utiliser la fonction `attributes()` pour retourner les attributs de cette matrice. Comment sont stockées les dimensions dans une matrice ? Comment sont stockés les noms de colonnes et de dans une matrice ? Y a-t-il un attribut class dans une matrice ? Est-ce que pour autant `inherits(matrice, "matrix")` renvoie `FALSE` ?

```{webr-r}
# Vous pouvez faire l'exercice ici.
```

::: {.callout-tip collapse="true"}

## Proposition de solution

```{r}
matrice <- matrix(1L:12L, nrow = 3L, ncol = 4L)
typeof(matrice)
colnames(matrice) <- c("les", "noms", "de", "colonnes")
rownames(matrice) <- c("voilà", "des", "lignes")
attributes(matrice)
```

On voit que :

* Une matrice n'est rien d'autre qu'un vecteur (ici un vecteur de type `"integer"`)
* Les dimensions sont stockées sous la forme d'un attribut `dim` qui vaut `c(nrow, ncol)`
* Les noms sont stockés sous la forme d'un attribut `dimnames`. Une liste de longueur 2 qui vaut `list(noms_lignes, noms_colonnes)`.
* De manière malheureusmement irrégulière et pour des raisons historiques, les matrices n'ont pas d'attribut class renseigné. La classe est implicite par la présence d'un attribut `dim`. On pourra par cependant vérifier que `inherits(matrice, "matrix")` vaut `TRUE`, de même que `is.matrix(matrice)`. Si les matrices étaient reconstruites aujourd'hui, sans doute qu'elles auraient un attribut `class` comme tout le monde.

:::

On voit qu'il suffit de renseigner un attribut `dim` à un vecteur pour définir une matrice. À l'aide de la fonction `structure()`, définir un vecteur `m` de valeur `1:12` muni d'un attribut dim qui signale une dimension de 3*4. Vérifier avec `inherits(m, "matrix")` et `is.matrix(m)` que le vecteur est bien pleinement reconnu comme une matrice.

```{webr-r}
# Vous pouvez faire l'exercice ici.
```

::: {.callout-tip collapse="true"}

## Proposition de solution

```{r}
m <- structure(1:12, dim = c(3, 4))
inherits(m, "matrix")
is.matrix(m)
```

On a vérifié qu'il suffit de définir un attribut de dimension pour dire qu'un vecteur est une matrice. Une matrice n'est rien de plus qu'un vecteur auquel on a rajouté une dimension.

:::

### Exercice 2 : Simuler des instances

Dans le chapitre sur l'évaluation, on était parvenu à ce compteur :

```{r}
#| eval: false
nouveau_compteur <-
  function() {
    n <- 0L
    this <-
      list(
        suivant = function() {
          n <<- n + 1L
          this
        },
        get = function() {
          n
        }
      )
    this
  }

compteur_1 <- nouveau_compteur()
compteur_2 <- nouveau_compteur()
compteur_1$
  suivant()$
  suivant()$
  suivant()
compteur_1$get()
compteur_2$get()
compteur_1$suivant()
compteur_2$suivant()
compteur_1$get()
compteur_2$get()
```

On demande dans cette exercice de :

* Modifier le code de la fonction `nouveau_compteur()` pour que la liste qu'elle renvoie soit de classe "super_compteur".
* Implémenter une méthode de la fonction générique `print()` qui affiche `Super Compteur : [i]\n` si le compteur en est à `[i]` (on rappelle que `\n` est une manière d'indiquer un saut de ligne).

```{webr-r}
# Vous pouvez faire l'exercice ici.
```

::: {.callout-tip collapse="true"}

```{r}
nouveau_compteur <-
  function() {
    n <- 0L
    this <-
      list(
        suivant = function() {
          n <<- n + 1L
          this
        },
        get = function() {
          n
        }
      )
    class(this) <- "super_compteur"
    this
  }

print.super_compteur <- function(x, ...) {
  cat("Super Compteur : ", x$get(), "\n", sep = "")
}

compteur_1 <- nouveau_compteur()
compteur_2 <- nouveau_compteur()
compteur_1$
  suivant()$
  suivant()$
  suivant()
compteur_1$get()
compteur_2$get()
compteur_1$suivant()
compteur_2$suivant()
compteur_1$get()
compteur_2$get()
```

On a maintenant un objet S3 qui se comporte avec des instances, comme en Programmation Orientée Objet classique.

:::