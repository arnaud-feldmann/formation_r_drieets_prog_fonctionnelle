---
title: "Fonctions d'ordre supérieur (arguments)"
---

## Fonctions d'ordre supérieur

En informatique, la notion de **fonction d'ordre supérieur** désigne une fonction avec au moins l'une des propriétés suivantes :

* Elle a pour *argument* une ou des fonctions.
* Elles *retournent* a minima une fonction.

Les fonctions d'ordre supérieur sont un élément central permettant l'expressivité des langages fonctionnels.

Dans cette première partie sur les fonctions d'ordre supérieur, nous abordons la thématique des fonctions avec ayant des *arguments* fonctionnels.

## Manipuler des fonctions avec des fonctions

On a déjà vu dans le point précédent deux fonctions qui s'appliquent sur des fonctions. `do.call` nous a permis d'appliquer une fonction de type `function(...)` sur une liste, tandis que `Reduce` nous a permis d'écrire `2 + 3 + 7 + 1` de manière un peu plus jolie qu'à la main.

On a vu dans l'introduction, également, que R est un langage principalement fonctionnel. R offre un certain nombre de fonctions permettant d'appliquer des fonctions de différentes manières. Nous verrons ici `lapply`, `vapply`, `Map`, `replicate`, `apply`, `do.call`, `Reduce`.

![](dessin_fonctions_manipulation.svg)

::: callout-note

## Remarque optionnelle

Un package du tidyverse, `purrr`, donne accès à des fonctions similaires à toutes celles décrites dans cette partie. [Ce lien](https://purrr.tidyverse.org/articles/base.html) donne des équivalents purrristes des fonctions d'ordre supérieur abordées ici.

L'usage est selon les gouts et les couleurs. Utiliser les fonctions de base est suffisant et permet de se débarasser d'une dépendance, mais purrr est plus cohérent avec le reste de l'écosystème tidyverse. Par exemple, il permet de passer facilement au package de parallélisation `furrr`.

:::

## lapply : appliquer une fonction à chaque élément d'une liste ou d'un vecteur

```{webr-r}
begaiement <-
  lapply(
    list(c("a", "b"),
         c("c", "d", "e"),
         c("f", "g")),
    function(x) c(x, x, x)
  )
begaiement
typeof(begaiement)
```

La fonction `function(x) c(x, x, x)` demande à répéter trois fois un élément. Cette fonction est appliquée terme à terme à chaque élement de la liste.

* `c("a", "b")` donne `c("a", "b", "a", "b", "a", "b")`
* `c("c", "d", "e")` donne `c("c", "d", "e", "c", "d", "e", "c", "d", "e")`
* `c("f", "g")` donne `c("f", "g", "f", "g", "f", "g")`

```{webr-r}
repeter_les_elements <- function(liste) {
  lapply(liste, function(x) c(x, x, x))
}
begaiement <-
  repeter_les_elements(
    list(c("a", "b"),
         c("c", "d", "e"),
         c("f", "g")))
begaiement
typeof(begaiement)
```

Le calcul ci-dessus montre qu'on peut utiliser `lapply` à l'intérieur d'une autre fonction.

```{webr-r}
repeter <- function(x) c(x, x, x)

repeter_les_elements <- function(liste) {
  lapply(liste, repeter)
}
begaiement <-
  repeter_les_elements(
    list(c("a", "b"),
         c("c", "d", "e"),
         c("f", "g")))
begaiement
typeof(begaiement)
```

On s'est d'ailleurs permis ici de remplacer `function(x) c(x, x, x)` par une fonction nommée qui s'appelle `repeter`. Ce petit changement illustre un aspect implicite des deux précédentes syntaxes utilisées : on utilisait `function(x) c(x, x, x)` en lieu et place d'un nom de fonction à l'intérieur du lapply ! On appelle de telles fonctions, dépourvues de noms, des **fonctions anonymes**. Si une fonction n'a pour vocation que d'être utilisée une seule fois, cela peut rendre la syntaxe plus claire et plus élégante qu'une **fonction nommée**.

```{webr-r}
begaiement_bis <-
  repeter_les_elements(c("a", "b", "c", "d"))
begaiement_bis
typeof(begaiement_bis)
```

Dans ce dernier calcul, on remarque que l'on peut appliquer `lapply` sur un vecteur.

Toutefois, dans les 4 calculs, **le résultat de `lapply` est une liste**. lapply retourne une liste même quand on lui soumet un vecteur.

::: callout-note

Dans les versions de R récentes, on peut utiliser la notation compacte `\(x) c(x, x, x)` à la place de `function(x) c(x, x, x)` pour désigner une fonction.

À l'intérieur de l'écosystème tidyverse, on peut également utiliser la notation `~c(.x, .x, .x)`.

:::

# vapply : une sorte de lapply mais avec un retour sous forme d'un vecteur ou d'une matrice.

On l'a vu dans les exemples précédents, le retour de `lapply` est une liste. Mais une liste n'est pas l'objet le plus pratique à manipuler dans un langage vectoriel ! la fonction `vapply` permet de retourner les résultats sous la forme d'un vecteur ou d'une matrice (lorsque cela a une pertinence). La syntaxe est un peu particulière mais on s'y habitue vite !

```{webr-r}
vecteur <- vapply(list(c(3L, 3L, 10L),
                       c(7L, -2L, 11L, 22L),
                       -1L),
                  \(x) x[1L] + 1L,
                  0L)
vecteur
typeof(vecteur)
```

`vapply` applique la fonction anonyme `\(x) x[1L] + 1L` sur chaque élément de la liste `list(c(3L, 3L, 10L), c(7L, -2L, 11L, 22L), -1L)` et renvoie un vecteur de type similaire à `0L` (c'est-à-dire un `"integer"`).

::: callout-note

On rappelle que dans R, une variable comme `-1L` n'est rien d'autre qu'un vecteur de taille `1L`. C'est pour cela qu'on a pu appliquer `\(x) x[1L] + 1L` sur -1L.

:::

```{webr-r}
vecteur <- vapply(list(c(3L, 3L, 10L),
                       c(7L, -2L, 11L, 22L),
                       -1L),
                  \(x) x[1L] + 1L,
                  133123128L)
vecteur
typeof(vecteur)
```

Ce calcul est exactement similaire au précédent. Ce qui est mis en avant ici, c'est que seul le *type* du troisième argument (`FUN.VALUE`) importe, sa valeur n'a aucune importance. Ici, si on veut retourner un vecteur entier, n'importe quel entier de taille `1L` fait l'affaire.

```{webr-r}
matrice <-
  vapply(
    c("a", "b", "c", "d"),
    \(x) c(x, x, x),
    c("", "", "")
  )
matrice
typeof(matrice)
```

Dans le cas où, comme ici, chaque *application unitaire* de la fonction utilisée retourne plusieurs valeurs, alors l'argument `FUN.VALUE` doit être un vecteur de même taille.

* L'application de `\(x) c(x, x, x)` sur `"a"` donne `c("a", "a", "a")`.
* L'application de `\(x) c(x, x, x)` sur `"b"` donne `c("b", "b", "b")`.
* L'application de `\(x) c(x, x, x)` sur `"c"` donne `c("c", "c", "c")`.
* L'application de `\(x) c(x, x, x)` sur `"d"` donne `c("d", "d", "d")`.

On attend quatre objets de **taille `3L`**. C'est pour cela que nous soumettons à l'argument `FUN.VALUE` un `"character"` de taille `3L`.

L'objet retourné sera une *matrice* et non plus un vecteur. Comme dans le cas vectoriel, son type est déterminé par celui de `FUN.VALUE`.

```{webr-r}
matrice <-
  vapply(
    c("a", "b", "c", "d"),
    \(x) c(x, x, x),
    c("je", "suis", "arbitraire")
  )
matrice
typeof(matrice)
```

Là encore, on remarque que les valeurs de l'argument `FUN.VALUE` sont purement arbitraires. Seules sa longueur et son type importent.

```{webr-r}
vecteur <- sapply(list(c(3L, 3L, 10L),
                       c(7L, -2L, 11L, 22L),
                       -1L),
                  \(x) x[1L] + 1L)
vecteur
typeof(vecteur)
```

Comme on le voit ci-dessous, `sapply` est un raccourci de `vapply` sans la `FUN.VALUE`. `sapply` devine automatiquement les dimensions et le type requis. Utiliser un `vapply` explicite est cependant *en général* une meilleure pratique à l'intérieur d'un programme.

```{webr-r}
matrice <-
  sapply(
    c("a", "b", "c", "d"),
    \(x) c(x, x, x)
  )
matrice
typeof(matrice)
```

::: callout-warning

## sapply est plus laxiste que vapply

Essayer d'utiliser un `sapply` sur :

```{r}
#| eval: false
lapply(
  list(c("a", "b"),
       c("c", "d", "e"),
       c("f", "g")),
  function(x) c(x, x, x)
)
```

```{webr-r}
# Vous pouvez essayer ici.
```

Que se passe-t-il ? Pourquoi ? Peut-on résoudre ce problème avec un vapply ?

::: {.callout-tip collapse="true"}

## Réponse

Les **vecteurs retournés** par la fonction `c(x, x, x)` sur ses entrées sont de tailles variables. C'est rédhibitoire pour que `sapply` puisse déterminer une dimension de matrice adéquate. `sapply` laisse donc le résultat sous la forme d'une liste.

On ne peut pas résoudre ce problème structurel avec un `vapply`, mais `vapply` a le mérite d'être plus strict : il renverra une erreur si les valeurs ne sont pas de la dimension explicitement demandée. `vapply` est *en général* une meilleur pratique.

:::

:::

## Map : appliquer une fonction multi-paramètres termes à termes

On a vu avec `lapply` comment appliquer une fonction sur chaque termes d'*une* liste ou d'un vecteur et retourner une liste. Cependant, parfois, un seul argument ne suffit pas, et l'on a envie d'appliquer une fonction terme à terme sur plusieurs listes ou vecteurs. La fonction `Map` remplit ce besoin.

```{webr-r}
Map(paste,
    c("a", "b", "c"),
    c("d", "e", "f"))
```

On voit ici que la fonction `Map` permet d'appliquer termet à terme la fonction `paste` sur plusieurs vecteurs character.

```{webr-r}
Map(paste,
    c("a", "b", "c"),
    c("d", "e", "f"),
    MoreArgs = list(sep = ""))
```

L'argument `MoreArgs` de `Map` permet de rajouter une liste d'arguments complémentaires, qui restent fixes entre tous les appels.

```{webr-r}
Map(\(...) paste(..., sep = ""),
    c("a", "b", "c"),
    c("d", "e", "f"))
```

On aurait aussi tout aussi pu utiliser une fonction anonyme pour spécifier des arguments complémentaires. C'est au choix !

```{webr-r}
Map(paste,
    c("a", "b", "c"),
    c("d", "e", "f"),
    c("g", "h", "i"))
```

On vérifie ci-dessus que la fonction `Map` permet d'utiliser plus que deux arguments.

```{webr-r}
Map(`+`,
    list(c(1L, 2L, 3L), c(4L, 5L, 6L, 7L), c(8L, 9L)),
    list(c(10L, 11L, 12L), c(13L, 14L, 15L, 16L), c(17L, 18L)))
```

La fonction `Map` peut tout-à-fait utiliser des listes. Ici, elle renvoie donc une liste appliquant la fonction `+` terme à terme :

* `c(1L, 2L, 3L) + c(10L, 11L, 12L)` pour le premier terme.
* `c(4L, 5L, 6L, 7L) + c(13L, 14L, 15L, 16L)` pour le deuxième terme.
* `c(8L, 9L) + c(17L, 18L)` pour le troisième terme.

## replicate : une variante commode de lapply pour les générations de nombres aléatoires

Certaines fonctions utiles en statistiques génèrent des nombres aléatoires. Par exemple, `runif(2L)` renvoie `2L` nombres entre 0 et 1 selon une loi uniforme. Si on veut générer `4L` vecteurs de `2L` nombres aléatoires, on voudrait appliquer un `lapply` sur `function() runif(2L)`.

Le problème, c'est que cette fonction est sans paramètre. Du coup comment lui spécifier un `lapply` de bonne longueur ? On voudrait faire un truc du genre :

```{webr-r}
lapply(list(NULL, NULL, NULL, NULL),
       function() runif(2L))
```

Mais cela n'est pas permis par R. On peut contourner le problème avec la solution ci-dessous :

```{webr-r}
lapply(1L:4L,
       function(x) runif(2L))
```

Ce n'est cependant pas des plus élégants, car on utilise un argument purement fictif. Une alternative un peu plus claire existe donc. C'est la fonction `replicate`.

```{webr-r}
replicate(4L, runif(2L), simplify = FALSE)
```

`replicate` est une variante de `lapply` qui permet d'évaluer une *expression* plusieurs fois de suite. Cela n'est, bien entendu, utile que dans le cas où cette expression renvoie des résultats différents à chaque évaluation, ce qui est notamment le cas en ce qui concerne la générations de nombres aléatoires.

On note l'argument `simplify = FALSE` à la fin. Si celui-ci n'est pas spécifié, il est par défaut défini à la valeur `TRUE`, et alors `replicate` se comporte comme un `sapply` ; il essaye de construire des matrices.

::: callout-note

Puisque `replicate` ne prend pas une fonction pour argument mais une expression, elle n'est pas *stricto censu* une fonction d'ordre supérieur. On la fait tout de même figurer ici car elle reste voisine d'un `lapply`.

:::

## apply : appliquer une fonction sur les lignes ou les colonnes d'une matrice

`apply` permet d'appliquer une fonction par ligne ou par colonne sur une matrice.

```{webr-r}
matrice <-
  matrix(1:12,
         nrow = 3L)
print(matrice)
apply(matrice,
      1L,
      max)
apply(matrice,
      2L,
      max)
```

Dans le tronçon de code ci-dessus, on a appliqué la fonction `max` (maximum) respectivement sur chaque ligne et chaque colonne. C'est l'argument `MARGIN` en deuxième position qui permet de déterminer la direction de cette application de fonction (`1` pour les lignes, `2` pour les colonnes).

::: callout-note

Il est à noter que quelques optimisations de ces fonctions existent. `rowSums`, `colSums`, `rowMeans`, `colMeans` ont toutes les quatre des noms assez parlants qui permettent d'éviter une écriture un peu trop poussive.

:::

## do.call : appliquer une fonction multi-paramètres sur une liste d'arguments

La fonction `do.call` permet d'utiliser une fonction multi-paramètres, par exemple (mais pas obligatoirement) une fonction dépendant de paramètres en dots `...`, sur une liste de valeurs.

```{webr-r}
do.call(paste, list("a", "b", "c", sep = "/"))
```

Ici, on a appliqué la fonction `paste` en même temps sur chaque élément de la liste fournie en argument. On peut noter, également, que les éléments nommés de la liste (ici `sep`) sont traduits par des arguments nommés.

## Reduce : réduire une liste ou un vecteur d'arguments par application successive d'un opérateur binaire

La fonction `Reduce` permet d'appliquer consécutivement une opération binaire.

```{webr-r}
Reduce(`+`, c(1, 2, 8, -7))
```

Cet exemple (que l'on a déjà vu dans le chapitre précédent) correspond à `((1 + 2) + 8) + (-7)`. Chaque étape utilise l'opération binaire `+`.

```{webr-r}
Reduce(`+`, c(1, 2, 8, -7), accumulate = TRUE)
```

Comme on le voit ci-dessus, on peut éventuellement, à l'aide de `accumulate = TRUE`, conserver les résultats intermédiaires de la réduction. À savoir ici `1`, puis `1 + 2`, puis `1 + 2 + 8` et enfin `1 + 2 + 8 - 7`.

Mais `Reduce` peut être employé dans des calculs plus complexes.

```{webr-r}
liste_fonctions <- list(
  \(x) x + 1,
  \(x) x / 3,
  atan
)

composer_fonctions <- function(e1, e2) {
  e1 <- match.fun(e1)
  e2 <- match.fun(e2)
  function(...) {
    e1(e2(...))
  }
}

fonction_composee <- Reduce(composer_fonctions, liste_fonctions)

fonction_composee(pi)
atan(pi) / 3 + 1
```

Dans l'exemple précédent, on a appliqué sur une liste de fonctions l'opérateur `Reduce` au sens de la composition. C'est un joli exemple pour montrer la richesse d'un langage fonctionnel et illustrer l'idée que `Reduce` n'est pas restreint à des opérations numériques. En général, cependant, on préfèrera éviter d'empiler des fonctions non-évaluées. On préfèrera donc une notation intermédiaire comme employé ci-dessous.

```{webr-r}
liste_fonctions <- list(
  \(x) x + 1,
  \(x) x / 3,
  atan
)

appliquer_fonction <- function(f, accumulateur) {
  f <- match.fun(f)
  f(accumulateur)
}

Reduce(appliquer_fonction, liste_fonctions, init = pi, right = TRUE)
```

Ici, plutôt que d'empiler des fonctions en mémoire, on les applique successivement. `applique_fonction` reste une opération binaire, mais est une loi de composition externe, dans la mesure où `f` est une fonction tandis que `accumulateur` est un résultat numérique. On remarque aussi qu'on a utilisé l'argument `init` de `Reduce` qui permet d'initialiser l'accumulateur. En effet si on veut obtenir `atan(pi) / 3 + 1` il faut bien renseigner qu'on commence à `pi` quelque part. L'argument `right = TRUE` permet de parcourir la liste de droite à gauche plutôt que de gauche à droite.

## Exercices

### Question 1

À l'aide de la fonction `pmax` (sans utiliser la fonction `max`), calculer le maximum de cette liste. Vous pouvez consulter l'aide de la fonction `pmax` avec `help(pmax)`.

```{webr-r}
liste <- list(1, -7, 8, 0)
# Vous pouvez faire l'exercice ici.
```

::: {.callout-tip collapse="true"}

## Proposition de solution

```{r}
liste <- list(1, -7, 8, 0)
do.call(pmax, liste)
```

:::

### Question 2

Générer une liste avec 10 vecteurs de taille 60, chacun répartis selon une loi normale d'espérance 3 et d'écart-type 0.5. Vous pouvez consulter l'aide de la fonction `rnorm` via `help(rnorm)`.

```{webr-r}
# Vous pouvez faire l'exercice ici.
```

::: {.callout-tip collapse="true"}

## Proposition de solution

```{r}
replicate(10, rnorm(n=60,mean = 3,sd = 0.5), simplify = FALSE)
```

:::

### Question 3

À l'aide de la fonction `paste0` (qui est comme la fonction `paste` mais avec l'argument par défaut `sep = ""`), produire la chaine de caractère `"aabbccddeeffgg (...) xxyyzz"`. Les lettres en minuscules sont accessibles via `letters`.

```{webr-r}
# Vous pouvez faire l'exercice ici.
```

::: {.callout-tip collapse="true"}

## Propositions de solution

```{r}
do.call(paste0, Map(paste0, letters, letters))

# ou

do.call(paste0, as.list(rep(letters, each = 2)))

# ou plus simplement

paste0(rep(letters, each = 2), collapse = "")
```

:::

### Question 4

Observer cette matrice des permutations en colonnes de `1L:5L` :

```{r}
vecteur <- 1L:5L
matrix(
  c(tail(vecteur, 5L),
    tail(vecteur, 4L), head(vecteur, 1L),
    tail(vecteur, 3L), head(vecteur, 2L),
    tail(vecteur, 2L), head(vecteur, 3L),
    tail(vecteur, 1L), head(vecteur, 4L)),
  nrow = length(vecteur),
  ncol = length(vecteur))
```

Pouvez-vous généraliser cette création de matrice à n'importe quel vecteur d'entiers ? Pour ce faire, construisez une fonction `super_matrice` dont l'unique paramètre est `vecteur`.

```{webr-r}
# Vous pouvez faire l'exercice ici.
```

::: {.callout-tip collapse="true"}

## Proposition de solution

```{r}
vecteur <- 1L:5L
super_matrice <- function(vecteur) {
  longueur <- length(vecteur)
  vapply(0L:(longueur - 1L),
         \(n) c(tail(vecteur, longueur - n), head(vecteur, n)),
         rep(0L,longueur))
}
super_matrice(vecteur)
```

:::

### Question 5

Proposer une version du [crible d'Eratosthène](https://fr.wikipedia.org/wiki/Crible_d%27%C3%89ratosth%C3%A8ne) faisant apparaître, pour un entier n donné, un vecteur booléen de taille n donnant la primalité (ou non) de l'entier i.

Par exemple, `crible(10)` donne `c(FALSE, TRUE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, FALSE, FALSE)`. En effet `1` n'est pas premier, `2` est premier, `3` est premier...

On pourra utiliser la fonction `Reduce`.

```{webr-r}
# Vous pouvez faire l'exercice ici.
```

::: {.callout-tip collapse="true"}

## Aide 1 (conseillée !)

Essayer, dans un premier temps, d'obtenir une fonction `est_multiple` avec `i` pour argument et un `n` fixé à l'avance dans l'environnement global, un vecteur :

* de taille n
* valant `TRUE` sur les multiples de `i`
* valant `FALSE` ailleurs

```{webr-r}
# Vous pouvez faire l'exercice ici.
```

::: {.callout-tip collapse="true"}

## Proposition de solution

```{r}
n <- 10L
est_multiple <- function(i) 1L:n %% i == 0L
est_multiple(2L)
```

:::

:::

::: {.callout-tip collapse="true"}

## Aide 2 (optionnel mais à ne pas consulter avant 5 minutes de brainstorming !)

Essayer, dans un premier temps, d'obtenir une fonction `ni_multiple_ni_i` avec `i` pour argument et un `n` fixé à l'avance dans l'environnement global, un vecteur :

* de taille n
* valant `TRUE` sur i
* valant `FALSE` sur les **autres** multiples de `i`
* valant `TRUE` ailleurs

```{webr-r}
# Vous pouvez faire l'exercice ici.
```

::: {.callout-tip collapse="true"}

## Proposition de solution

```{r}
n <- 10L
ni_multiple_ni_i <- function(i) 1L:n == i | 1L:n %% i != 0L
ni_multiple_ni_i(2L)
```

:::

:::


::: {.callout-tip collapse="true"}

## Proposition de solution

```{r}
crible <- function(n) {
  Reduce(`&`,
         lapply(2L:sqrt(n), \(i) 1L:n == i | 1L:n %% i != 0L),
         init = c(FALSE, rep(TRUE, n - 1L)))
}
crible(10L)
```

:::